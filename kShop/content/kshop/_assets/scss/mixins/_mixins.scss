@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
}

@mixin clearfix {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

@mixin opacity($value) {
    $ieValue: $value * 100;
    -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=$ieValue);
    filter: alpha(opacity = $ieValue);
    -moz-opacity: $value;
    -khtml-opacity: $value;
    opacity: $value;
}

@mixin rem($property, $values) {
    // Create a couple of empty lists as output buffers.
    $fontSize: $baseFontSize;
    $pxValues: ();
    $remValues: ();
    // Loop through the $values list
    @each $value in $values {
        // For each property value, if it's in rem or px, derive both rem and
        // px values for it and add those to the end of the appropriate buffer.
        // Ensure all pixel values are rounded to the nearest pixel.
        @if $value == 0 or $value == 0px {
            // 0 -- use it without a unit
            $pxValues: join($pxValues, 0);
            $remValues: join($remValues, 0);
        }
        @else if type-of($value) == number and not unitless($value) and unit($value) == px {
            // px value given - calculate rem value from font-size
            $newRemValue: $value / $fontSize;
            $pxValues: join($pxValues, round($value));
            $remValues: join($remValues, #{$newRemValue}rem);
        }
        @else if type-of($value) == number and not unitless($value) and unit($value) == "%" {
            // % value given - don't add px or rem
            $pxValues: join($pxValues, #{$value});
            $remValues: join($remValues, #{$value});
        }
        @else if $value == auto {
            // auto - don't add px or rem
            $pxValues: join($pxValues, auto);
            $remValues: join($remValues, auto);
        }
        @else {
            // unitless value - use those directly as rem and calculate the px-fallback
            $pxValues: join($pxValues, round($value * $fontSize));
            $remValues: join($remValues, #{$value}rem);
        }
    }
    // output the converted rules
    #{$property}: $pxValues;
    #{$property}: $remValues;
}

@mixin border-radius($topLeft: $baseBorderRadius, $topRight: $baseBorderRadius, $bottomRight: $baseBorderRadius, $bottomLeft: $baseBorderRadius) {
    -webkit-border-radius: $topLeft $topRight $bottomRight $bottomLeft;
    -moz-border-radius: $topLeft $topRight $bottomRight $bottomLeft;
    border-radius: $topLeft $topRight $bottomRight $bottomLeft;
}

@mixin vendorize($property, $value) {
    -webkit-#{$property}: $value;
    -moz-#{$property}: $value;
    -ms-#{$property}: $value;
    -o-#{$property}: $value;
    #{$property}: $value;
}

@mixin linkTextOffscreen {
    text-indent: -9999px;
    overflow: hidden;
    text-decoration: none;
    display: block;
    font-size: 0;
    text-align: start;
}

@mixin hoverActiveFocus($property, $value) {
    &:hover, &:active, &:focus {
        #{$property}: $value;
    }
}

@mixin linear-gradient($fromColor, $toColor) {
  background-color: $toColor; /* Fallback Color */
  background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor)); /* Saf4+, Chrome */
  background-image: -webkit-linear-gradient(top, $fromColor, $toColor); /* Chrome 10+, Saf5.1+, iOS 5+ */
  background-image:    -moz-linear-gradient(top, $fromColor, $toColor); /* FF3.6 */
  background-image:     -ms-linear-gradient(top, $fromColor, $toColor); /* IE10 */
  background-image:      -o-linear-gradient(top, $fromColor, $toColor); /* Opera 11.10+ */
  background-image:         linear-gradient(top, $fromColor, $toColor);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

@mixin bottom-shadow($top, $left, $blur, $spread, $color) {
    -webkit-box-shadow: -6px 0 white, $top $left $blur $spread $color;
    -moz-box-shadow: -6px 0 white, $top $left $blur $spread $color;
    box-shadow: -6px 0 white, $top $left $blur $spread $color;
}
